//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var ZaapService_connect_args = function(args) {
  this.gameName = null;
  this.releaseName = null;
  this.instanceId = null;
  this.hash = null;
  if (args) {
    if (args.gameName !== undefined && args.gameName !== null) {
      this.gameName = args.gameName;
    }
    if (args.releaseName !== undefined && args.releaseName !== null) {
      this.releaseName = args.releaseName;
    }
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
  }
};
ZaapService_connect_args.prototype = {};
ZaapService_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.releaseName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.instanceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_connect_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_connect_args');
  if (this.gameName !== null && this.gameName !== undefined) {
    output.writeFieldBegin('gameName', Thrift.Type.STRING, 1);
    output.writeString(this.gameName);
    output.writeFieldEnd();
  }
  if (this.releaseName !== null && this.releaseName !== undefined) {
    output.writeFieldBegin('releaseName', Thrift.Type.STRING, 2);
    output.writeString(this.releaseName);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.I32, 3);
    output.writeI32(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 4);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_connect_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.ZaapError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ZaapService_connect_result.prototype = {};
ZaapService_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.ZaapError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_connect_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_auth_getGameToken_args = function(args) {
  this.gameSession = null;
  this.gameId = null;
  if (args) {
    if (args.gameSession !== undefined && args.gameSession !== null) {
      this.gameSession = args.gameSession;
    }
    if (args.gameId !== undefined && args.gameId !== null) {
      this.gameId = args.gameId;
    }
  }
};
ZaapService_auth_getGameToken_args.prototype = {};
ZaapService_auth_getGameToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.gameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_auth_getGameToken_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_auth_getGameToken_args');
  if (this.gameSession !== null && this.gameSession !== undefined) {
    output.writeFieldBegin('gameSession', Thrift.Type.STRING, 1);
    output.writeString(this.gameSession);
    output.writeFieldEnd();
  }
  if (this.gameId !== null && this.gameId !== undefined) {
    output.writeFieldBegin('gameId', Thrift.Type.I32, 2);
    output.writeI32(this.gameId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_auth_getGameToken_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.ZaapError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ZaapService_auth_getGameToken_result.prototype = {};
ZaapService_auth_getGameToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.ZaapError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_auth_getGameToken_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_auth_getGameToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_updater_isUpdateAvailable_args = function(args) {
  this.gameSession = null;
  if (args) {
    if (args.gameSession !== undefined && args.gameSession !== null) {
      this.gameSession = args.gameSession;
    }
  }
};
ZaapService_updater_isUpdateAvailable_args.prototype = {};
ZaapService_updater_isUpdateAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_updater_isUpdateAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_updater_isUpdateAvailable_args');
  if (this.gameSession !== null && this.gameSession !== undefined) {
    output.writeFieldBegin('gameSession', Thrift.Type.STRING, 1);
    output.writeString(this.gameSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_updater_isUpdateAvailable_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.ZaapError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ZaapService_updater_isUpdateAvailable_result.prototype = {};
ZaapService_updater_isUpdateAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.ZaapError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_updater_isUpdateAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_updater_isUpdateAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_settings_get_args = function(args) {
  this.gameSession = null;
  this.key = null;
  if (args) {
    if (args.gameSession !== undefined && args.gameSession !== null) {
      this.gameSession = args.gameSession;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
ZaapService_settings_get_args.prototype = {};
ZaapService_settings_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_settings_get_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_settings_get_args');
  if (this.gameSession !== null && this.gameSession !== undefined) {
    output.writeFieldBegin('gameSession', Thrift.Type.STRING, 1);
    output.writeString(this.gameSession);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_settings_get_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.ZaapError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ZaapService_settings_get_result.prototype = {};
ZaapService_settings_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.ZaapError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_settings_get_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_settings_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_settings_set_args = function(args) {
  this.gameSession = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.gameSession !== undefined && args.gameSession !== null) {
      this.gameSession = args.gameSession;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ZaapService_settings_set_args.prototype = {};
ZaapService_settings_set_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_settings_set_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_settings_set_args');
  if (this.gameSession !== null && this.gameSession !== undefined) {
    output.writeFieldBegin('gameSession', Thrift.Type.STRING, 1);
    output.writeString(this.gameSession);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_settings_set_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.ZaapError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ZaapService_settings_set_result.prototype = {};
ZaapService_settings_set_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.ZaapError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_settings_set_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_settings_set_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_userInfo_get_args = function(args) {
  this.gameSession = null;
  if (args) {
    if (args.gameSession !== undefined && args.gameSession !== null) {
      this.gameSession = args.gameSession;
    }
  }
};
ZaapService_userInfo_get_args.prototype = {};
ZaapService_userInfo_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_userInfo_get_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_userInfo_get_args');
  if (this.gameSession !== null && this.gameSession !== undefined) {
    output.writeFieldBegin('gameSession', Thrift.Type.STRING, 1);
    output.writeString(this.gameSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_userInfo_get_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.ZaapError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ZaapService_userInfo_get_result.prototype = {};
ZaapService_userInfo_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.ZaapError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_userInfo_get_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_userInfo_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_release_restartOnExit_args = function(args) {
  this.gameSession = null;
  if (args) {
    if (args.gameSession !== undefined && args.gameSession !== null) {
      this.gameSession = args.gameSession;
    }
  }
};
ZaapService_release_restartOnExit_args.prototype = {};
ZaapService_release_restartOnExit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_release_restartOnExit_args.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_release_restartOnExit_args');
  if (this.gameSession !== null && this.gameSession !== undefined) {
    output.writeFieldBegin('gameSession', Thrift.Type.STRING, 1);
    output.writeString(this.gameSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapService_release_restartOnExit_result = function(args) {
};
ZaapService_release_restartOnExit_result.prototype = {};
ZaapService_release_restartOnExit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapService_release_restartOnExit_result.prototype.write = function(output) {
  output.writeStructBegin('ZaapService_release_restartOnExit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZaapServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ZaapServiceClient.prototype = {};
ZaapServiceClient.prototype.seqid = function() { return this._seqid; };
ZaapServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ZaapServiceClient.prototype.connect = function(gameName, releaseName, instanceId, hash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_connect(gameName, releaseName, instanceId, hash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_connect(gameName, releaseName, instanceId, hash);
  }
};

ZaapServiceClient.prototype.send_connect = function(gameName, releaseName, instanceId, hash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_connect_args();
  args.gameName = gameName;
  args.releaseName = releaseName;
  args.instanceId = instanceId;
  args.hash = hash;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_connect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('connect failed: unknown result');
};
ZaapServiceClient.prototype.auth_getGameToken = function(gameSession, gameId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_auth_getGameToken(gameSession, gameId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_auth_getGameToken(gameSession, gameId);
  }
};

ZaapServiceClient.prototype.send_auth_getGameToken = function(gameSession, gameId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('auth_getGameToken', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_auth_getGameToken_args();
  args.gameSession = gameSession;
  args.gameId = gameId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_auth_getGameToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_auth_getGameToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('auth_getGameToken failed: unknown result');
};
ZaapServiceClient.prototype.updater_isUpdateAvailable = function(gameSession, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updater_isUpdateAvailable(gameSession);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updater_isUpdateAvailable(gameSession);
  }
};

ZaapServiceClient.prototype.send_updater_isUpdateAvailable = function(gameSession) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updater_isUpdateAvailable', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_updater_isUpdateAvailable_args();
  args.gameSession = gameSession;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_updater_isUpdateAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_updater_isUpdateAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updater_isUpdateAvailable failed: unknown result');
};
ZaapServiceClient.prototype.settings_get = function(gameSession, key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_settings_get(gameSession, key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_settings_get(gameSession, key);
  }
};

ZaapServiceClient.prototype.send_settings_get = function(gameSession, key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('settings_get', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_settings_get_args();
  args.gameSession = gameSession;
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_settings_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_settings_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('settings_get failed: unknown result');
};
ZaapServiceClient.prototype.settings_set = function(gameSession, key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_settings_set(gameSession, key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_settings_set(gameSession, key, value);
  }
};

ZaapServiceClient.prototype.send_settings_set = function(gameSession, key, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('settings_set', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_settings_set_args();
  args.gameSession = gameSession;
  args.key = key;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_settings_set = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_settings_set_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null);
};
ZaapServiceClient.prototype.userInfo_get = function(gameSession, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_userInfo_get(gameSession);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_userInfo_get(gameSession);
  }
};

ZaapServiceClient.prototype.send_userInfo_get = function(gameSession) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('userInfo_get', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_userInfo_get_args();
  args.gameSession = gameSession;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_userInfo_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_userInfo_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('userInfo_get failed: unknown result');
};
ZaapServiceClient.prototype.release_restartOnExit = function(gameSession, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_release_restartOnExit(gameSession);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_release_restartOnExit(gameSession);
  }
};

ZaapServiceClient.prototype.send_release_restartOnExit = function(gameSession) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('release_restartOnExit', Thrift.MessageType.CALL, this.seqid());
  var args = new ZaapService_release_restartOnExit_args();
  args.gameSession = gameSession;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ZaapServiceClient.prototype.recv_release_restartOnExit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ZaapService_release_restartOnExit_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var ZaapServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ZaapServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ZaapServiceProcessor.prototype.process_connect = function(seqid, input, output) {
  var args = new ZaapService_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.connect.length === 4) {
    Q.fcall(this._handler.connect, args.gameName, args.releaseName, args.instanceId, args.hash)
      .then(function(result) {
        var result_obj = new ZaapService_connect_result({success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ZaapError) {
          result = new ZaapService_connect_result(err);
          output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.connect(args.gameName, args.releaseName, args.instanceId, args.hash, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ZaapError) {
        result_obj = new ZaapService_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ZaapServiceProcessor.prototype.process_auth_getGameToken = function(seqid, input, output) {
  var args = new ZaapService_auth_getGameToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.auth_getGameToken.length === 2) {
    Q.fcall(this._handler.auth_getGameToken, args.gameSession, args.gameId)
      .then(function(result) {
        var result_obj = new ZaapService_auth_getGameToken_result({success: result});
        output.writeMessageBegin("auth_getGameToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ZaapError) {
          result = new ZaapService_auth_getGameToken_result(err);
          output.writeMessageBegin("auth_getGameToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auth_getGameToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.auth_getGameToken(args.gameSession, args.gameId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ZaapError) {
        result_obj = new ZaapService_auth_getGameToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("auth_getGameToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("auth_getGameToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ZaapServiceProcessor.prototype.process_updater_isUpdateAvailable = function(seqid, input, output) {
  var args = new ZaapService_updater_isUpdateAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updater_isUpdateAvailable.length === 1) {
    Q.fcall(this._handler.updater_isUpdateAvailable, args.gameSession)
      .then(function(result) {
        var result_obj = new ZaapService_updater_isUpdateAvailable_result({success: result});
        output.writeMessageBegin("updater_isUpdateAvailable", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ZaapError) {
          result = new ZaapService_updater_isUpdateAvailable_result(err);
          output.writeMessageBegin("updater_isUpdateAvailable", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updater_isUpdateAvailable", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updater_isUpdateAvailable(args.gameSession, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ZaapError) {
        result_obj = new ZaapService_updater_isUpdateAvailable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updater_isUpdateAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updater_isUpdateAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ZaapServiceProcessor.prototype.process_settings_get = function(seqid, input, output) {
  var args = new ZaapService_settings_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.settings_get.length === 2) {
    Q.fcall(this._handler.settings_get, args.gameSession, args.key)
      .then(function(result) {
        var result_obj = new ZaapService_settings_get_result({success: result});
        output.writeMessageBegin("settings_get", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ZaapError) {
          result = new ZaapService_settings_get_result(err);
          output.writeMessageBegin("settings_get", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("settings_get", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.settings_get(args.gameSession, args.key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ZaapError) {
        result_obj = new ZaapService_settings_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("settings_get", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("settings_get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ZaapServiceProcessor.prototype.process_settings_set = function(seqid, input, output) {
  var args = new ZaapService_settings_set_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.settings_set.length === 3) {
    Q.fcall(this._handler.settings_set, args.gameSession, args.key, args.value)
      .then(function(result) {
        var result_obj = new ZaapService_settings_set_result({success: result});
        output.writeMessageBegin("settings_set", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ZaapError) {
          result = new ZaapService_settings_set_result(err);
          output.writeMessageBegin("settings_set", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("settings_set", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.settings_set(args.gameSession, args.key, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ZaapError) {
        result_obj = new ZaapService_settings_set_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("settings_set", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("settings_set", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ZaapServiceProcessor.prototype.process_userInfo_get = function(seqid, input, output) {
  var args = new ZaapService_userInfo_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.userInfo_get.length === 1) {
    Q.fcall(this._handler.userInfo_get, args.gameSession)
      .then(function(result) {
        var result_obj = new ZaapService_userInfo_get_result({success: result});
        output.writeMessageBegin("userInfo_get", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ZaapError) {
          result = new ZaapService_userInfo_get_result(err);
          output.writeMessageBegin("userInfo_get", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("userInfo_get", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.userInfo_get(args.gameSession, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ZaapError) {
        result_obj = new ZaapService_userInfo_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("userInfo_get", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("userInfo_get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ZaapServiceProcessor.prototype.process_release_restartOnExit = function(seqid, input, output) {
  var args = new ZaapService_release_restartOnExit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.release_restartOnExit.length === 1) {
    Q.fcall(this._handler.release_restartOnExit, args.gameSession)
      .then(function(result) {
        var result_obj = new ZaapService_release_restartOnExit_result({success: result});
        output.writeMessageBegin("release_restartOnExit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("release_restartOnExit", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.release_restartOnExit(args.gameSession, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ZaapService_release_restartOnExit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("release_restartOnExit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("release_restartOnExit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
