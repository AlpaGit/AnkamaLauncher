//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ErrorCode = {
  'UNKNOWN' : 1,
  'UNAUTHORIZED' : 2,
  'INVALID_GAME_SESSION' : 3,
  'CONNECTION_FAILED' : 1001,
  'INVALID_CREDENTIALS' : 1002,
  'AUTH_NOT_LOGGED_IN' : 2001,
  'AUTH_BAN' : 2002,
  'AUTH_BLACKLIST' : 2003,
  'AUTH_LOCKED' : 2004,
  'AUTH_DELETED' : 2005,
  'AUTH_RESETANKAMA' : 2006,
  'AUTH_OTPTIMEFAILED' : 2007,
  'AUTH_SECURITYCARD' : 2008,
  'AUTH_BRUTEFORCE' : 2009,
  'AUTH_FAILED' : 2010,
  'AUTH_PARTNER' : 2011,
  'AUTH_MAILNOVALID' : 2012,
  'AUTH_BETACLOSED' : 2013,
  'AUTH_NOACCOUNT' : 2014,
  'AUTH_ACCOUNT_LINKED' : 2015,
  'AUTH_ACCOUNT_INVALID' : 2016,
  'AUTH_ACCOUNT_SHIELDED' : 2017,
  'UPDATER_CODE_RANGE' : 3001,
  'SETTINGS_KEY_NOT_FOUND' : 4001,
  'SETTINGS_INVALID_VALUE' : 4002,
  'USER_INFO_UNAVAILABLE' : 5001
};
var ZaapError = module.exports.ZaapError = function(args) {
  Thrift.TException.call(this, "ZaapError");
  this.name = "ZaapError";
  this.code = null;
  this.details = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
  }
};
Thrift.inherits(ZaapError, Thrift.TException);
ZaapError.prototype.name = 'ZaapError';
ZaapError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZaapError.prototype.write = function(output) {
  output.writeStructBegin('ZaapError');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 2);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

